using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Photon.Pun;
using UnityEngine.SceneManagement;

public class cshGameManager : MonoBehaviourPun // ?????? ???? ???? ???? ?? ???? UI?? ???????? ???? ?????? ????????
{

    int i;
    public static cshGameManager instance // ???????? ?????? ?????????? ???????? ?????? ????????
    {
        get
        {
            // ???? ?????? ?????? ???? ?????????? ???????? ????????
            if (m_instance == null)
            {
                // ?????? GameManager ?????????? ???? ????
                m_instance = FindObjectOfType<cshGameManager>();
            }

            // ?????? ?????????? ????
            return m_instance;
        }
    }

    private static cshGameManager m_instance; // ???????? ?????? static ????

    public GameObject[] mrPlayers;
    public GameObject[] mrPlayersPos;

    public GameObject[] vrPlayers;
    public GameObject[] vrPlayersPos;


    //private GameObject MixedRealitySceneContent;
    //public GameObject MixedRealityPlayspace; // ?????? MR ???????? ??????
    //public GameObject MixedRealityToolkit;
    public GameObject MRPlayerPrefab; // ?????? MR ???????? ??????
    public GameObject VRPlayerPrefab; // ?????? VR ???????? ??????

    //public GameObject MRSpawnPosPrefab; // ?????? VR ???????? ???????? ????
    //public GameObject VRSpawnPosPrefab; // ?????? AR ???????? ???????? ????


    private int playerCnt = 0;

    public int userId;

    Hashtable Player = new Hashtable();
    bool state = true;
    private void Awake()
    {
        // ???? ?????? ?????????? ?? ???? GameManager ?????????? ??????
        if (instance != this)
        {
            // ?????? ????
            Destroy(gameObject);
        }
    }

    private void Start()
    {
        userId = GameObject.FindWithTag("UserId").GetComponent<cshSelectUser>().userId;
        //userId = GameObject.Find("UserId").GetComponent<cshSelectUser>().userId;
        //PC Editor ????????//////
        //Photon.Realtime.Player[] plys = PhotonNetwork.PlayerListOthers;
        //playerCnt = PhotonNetwork.CountOfPlayers - 1;
        /////////////////////////
        ///
        //if (playerCnt == 0)
        //if (Application.platform != RuntimePlatform.Android)
        //Vector3 randomSpawnPos = PlayersPos[userId].transform.position;//Random.insideUnitSphere * 5f;
        //PhotonNetwork.Instantiate(Players[userId].name, randomSpawnPos, Quaternion.identity);

        //???????????? ???????????? ?????????????? ArrayList?? ????

        if (userId == 1)
        {
            // ?????? ???? ???? ????
            //Vector3 randomSpawnPos = VRSpawnPosPrefab.transform.position;//Random.insideUnitSphere * 5f;
            Vector3 randomSpawnPos = new Vector3(0.0f, 0.0f, 0.0f);//Random.insideUnitSphere * 5f;

            // ???????????? ???? ?????????????? ???? ????  
            // ???? ???? ?????????? ???????? ???? ???????? ???? ?????? ???????????? ????
            PhotonNetwork.Instantiate(VRPlayerPrefab.name, randomSpawnPos, Quaternion.identity);
            //playerCnt++;
        }
        else
        {
            //Vector3 randomSpawnPos = MRSpawnPosPrefab.transform.position;//Random.insideUnitSphere * 5f;
            Vector3 randomSpawnPos = new Vector3(0.0f, 0.0f, 0.0f);///Random.insideUnitSphere * 5f;
            //PhotonNetwork.Instantiate(MixedRealityPlayspace.name, randomSpawnPos, Quaternion.identity);
            //PhotonNetwork.Instantiate(MixedRealityToolkit.name, randomSpawnPos, Quaternion.identity);
            //MixedRealityPlayspace = GameObject.Find("MixedRealityPlayspace");
            //GameObject MRPCamera = MixedRealityPlayspace.transform.GetChild(0).gameObject;
            //GameObject temp = PhotonNetwork.Instantiate(MRPlayerPrefab.name, randomSpawnPos, Quaternion.identity);
            //temp.transform.parent = MRPCamera.transform;
        }

        //else
        /*
        if (Application.platform == RuntimePlatform.Android) // Android ???????? ????       
        {
            //Vector3 randomSpawnPos = MRSpawnPosPrefab.transform.position;//Random.insideUnitSphere * 5f;
            Vector3 randomSpawnPos = new Vector3(0.0f, 0.0f, 0.0f);///Random.insideUnitSphere * 5f;
            PhotonNetwork.Instantiate(MRPlayerPrefab.name, randomSpawnPos, Quaternion.identity);
        }
        else
        {
                // ?????? ???? ???? ????
                //Vector3 randomSpawnPos = VRSpawnPosPrefab.transform.position;//Random.insideUnitSphere * 5f;
            Vector3 randomSpawnPos = new Vector3(0.0f, 0.0f, 0.0f);///Random.insideUnitSphere * 5f;
            // ???????????? ???? ?????????????? ???? ????  
            // ???? ???? ?????????? ???????? ???? ???????? ???? ?????? ???????????? ????
            PhotonNetwork.Instantiate(VRPlayerPrefab.name, randomSpawnPos, Quaternion.identity);
                //playerCnt++;

        }
        */
        //if (Application.platform == RuntimePlatform.Android) // Android ???????? ????       
    }

    void PlayerViewSystem()
    {

    }
}